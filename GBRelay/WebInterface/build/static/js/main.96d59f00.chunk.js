(this["webpackJsonpgb-relay-web"]=this["webpackJsonpgb-relay-web"]||[]).push([[0],{13:function(e,t,s){"use strict";s.d(t,"a",(function(){return o}));const n=e=>new Uint8Array(e.match(/.{1,2}/g).map((e=>parseInt(e,16))));class o{constructor(){this.buffer=[],this.buffer_in=[],this.buffer_out=[],this.send_active=!1}static getPorts(){return navigator.usb.getDevices().then((e=>e))}static requestPort(){return navigator.usb.requestDevice({filters:[{vendorId:9114},{vendorId:51966}]}).then((e=>e))}getEndpoints(e){e.forEach((e=>{e.alternates.forEach((t=>{255===t.interfaceClass&&(console.log("Interface number:"),console.log(e.interfaceNumber),this.ifNum=e.interfaceNumber,t.endpoints.forEach((e=>{"out"===e.direction&&(console.log("Endpoint out: "),console.log(e.endpointNumber),this.epOut=e.endpointNumber),"in"===e.direction&&(console.log("Endpoint in: "),console.log(e.endpointNumber),this.epIn=e.endpointNumber)})))}))}))}getDevice(){let e=null;return this.ready=!1,new Promise(((t,s)=>{o.requestPort().then((t=>(console.log("Opening device..."),e=t,this.device=e,t.open()))).then((()=>(console.log("Selecting configuration"),e.selectConfiguration(1)))).then((()=>{console.log("Getting endpoints"),this.getEndpoints(e.configuration.interfaces)})).then((()=>(console.log("Claiming interface"),e.claimInterface(this.ifNum)))).then((()=>(console.log("Select alt interface"),e.selectAlternateInterface(this.ifNum,0)))).then((()=>(console.log("Control Transfer Out"),e.controlTransferOut({requestType:"class",recipient:"interface",request:34,value:1,index:this.ifNum})))).then((()=>{console.log("Ready!"),this.ready=!0,this.device=e,t()}))}))}read(e){return new Promise(((t,s)=>{this.device.transferIn(this.epIn,e).then((e=>{t(e)}),(e=>{console.log("Error"),console.log(e),s(e)}))}))}readHex(e){return new Promise(((t,s)=>{this.read(e).then((e=>{var s;console.log("RES"),console.log(e.data.buffer),t((s=e.data.buffer,[...new Uint8Array(s)].map((e=>e.toString(16).padStart(2,"0"))).join("")))}),(e=>{s(e)}))}))}readString(){this.device.transferIn(this.epIn,64).then((e=>(console.log("ReadResult"),console.log(e),(new TextDecoder).decode(e.data))),(e=>{console.log("ReadError"),console.log(e)}))}sendString(e){return this.send(new TextEncoder("utf-8").encode(e))}sendHex(e){return this.send(n(e))}send(e){return this.device.transferOut(this.epOut,e)}bufSendFunction(){if(this.send_active=!0,0!==this.buffer.length){var e=this.buffer.shift(),t=e[0],s=e[1];this.send(t).then((()=>{setTimeout((()=>{this.bufSendFunction()}),s)}))}else this.send_active=!1}bufSend(e,t){this.buffer.push([e,t]),this.send_active||this.bufSendFunction()}bufSendHex(e,t){var s=n(e);this.bufSend(s,t)}receiveFromOtherGB(e){this.buffer_in.push(e)}receiveFromMyGB(){this.device.transferIn(this.epIn,64).then((e=>{this.buffer_out.push(e.data)}))}sendToMyGB(){this.buffer_in.length>0&&this.device.controleTransferOut(this.epOut,this.buffer_in.pop())}}},18:function(e,t,s){"use strict";s.r(t),function(e){var t=s(8),n=s.n(t),o=s(15),i=s.n(o),a=(s(23),s(14),s(25),s(26),s(17)),r=s(13),c=s(6);e.jQuery=s(12),s(14);class h extends n.a.Component{constructor(e){super(e),console.log("Component init..."),console.log("Set State to 0"),this.state=0,this.master=1,this.gbdatain="None",this.gbdataout="None",console.log("Creating GBWebsocket ..."),this.ws=new a.a.connect("https://127.0.0.1:8080")}handleC(){console.log("Click create"),console.log("Creating serial ..."),this.serial=new r.a,console.log("Initializing websocket gymnastic ! (onmessage function)"),console.log("Getting device ..."),this.serial.getDevice().then((()=>{this.state=1,console.log("Usb connected, updating status."),this.connectionMaster()})).catch((e=>{console.log("CATTTCH "+e)}))}handleJ(){console.log("Click create"),console.log("Creating serial ..."),this.serial=new r.a,console.log("Initializing websocket gymnastic ! (onmessage function)"),console.log("Getting device ..."),this.serial.getDevice().then((()=>{this.state=1,console.log("Usb connected, updating status."),this.master=0,this.connectionNotMaster()})).catch((e=>{console.log("CATTTCH "+e)}))}connectionNotMaster(){let e=0;console.log("Wait for receiving first message ..."),this.setState({state:1}),this.ws.on("message",((t,s)=>{console.log("Got message "+t+" from "+s),this.gbdatain=t,this.setState({gbdatain:t}),console.log("Communicating to my GB ..."),this.serial.sendHex(this.gbdatain),this.ws.auth.serverOffset=s;this.ws.id,e++;this.gbdataout=this.serial.readHex(),this.setState({gbdataout:this.gbdataout}),console.log("Sending to other GB "+this.gbdataout+" from my GB..."),this.ws.emit("message",{text:JSON.parse(this.gbdataout),name:"GB"+this.ws.id,id:this.ws.id+""+Math.random(),socketID:this.ws.id}),console.log("Exchange "+e+" : OK.")}))}connectionMaster(){let e=0;console.log("Initiatting my first message ...");this.ws.id,e++;this.gbdataout=this.serial.readHex(),this.setState({gbdataout:this.gbdataout,state:1}),console.log("Sending to other GB "+this.gbdataout+" from my GB..."),this.ws.emit("message",{text:JSON.parse(this.gbdataout),name:"GB"+this.ws.id,id:this.ws.id+""+Math.random(),socketID:this.ws.id}),console.log("First Exchange : OK."),this.ws.on("message",((t,s)=>{console.log("Got message "+t+" from "+s),this.gbdatain=t,this.setState({gbdatain:t}),console.log("Communicating to my GB ..."),this.serial.sendHex(this.gbdatain),this.ws.auth.serverOffset=s;this.ws.id,e++;this.gbdataout=this.serial.readHex(),this.setState({gbdataout:this.gbdataout}),console.log("Sending to other GB "+this.gbdataout+" from my GB..."),this.ws.emit("message",{text:JSON.parse(this.gbdataout),name:"GB"+this.ws.id,id:this.ws.id+""+Math.random(),socketID:this.ws.id}),console.log("Exchange "+e+" : OK.")}))}render(){return 0===this.state?Object(c.jsxs)("div",{className:"connect",children:[Object(c.jsx)("button",{onClick:e=>this.handleC(),className:"btn btn-lg btn-secondary",children:"Host (Master)"}),Object(c.jsx)("br",{}),Object(c.jsx)("button",{onClick:e=>this.handleJ(),className:"btn btn-lg btn-secondary",children:"Connect (Client)"})]}):1===this.state?Object(c.jsx)("div",{className:"connect",children:Object(c.jsxs)("h4",{children:["Connected => IN ",this.gbdatain.toString()," OUT ",this.gbdataout.toString()]})}):void 0}}i.a.render(Object(c.jsx)(h,{}),document.getElementById("root"))}.call(this,s(7))},26:function(e,t,s){}},[[18,1,2]]]);
//# sourceMappingURL=main.96d59f00.chunk.js.map