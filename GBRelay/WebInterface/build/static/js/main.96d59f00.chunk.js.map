{"version":3,"sources":["serial.js","index.js"],"names":["fromHexString","hexString","Uint8Array","match","map","byte","parseInt","Serial","constructor","this","buffer","buffer_in","buffer_out","send_active","getPorts","navigator","usb","getDevices","then","devices","requestPort","requestDevice","device","getEndpoints","interfaces","forEach","element","alternates","elementalt","interfaceClass","console","log","interfaceNumber","ifNum","endpoints","elementendpoint","direction","endpointNumber","epOut","epIn","getDevice","ready","Promise","resolve","reject","dev","open","selectConfiguration","configuration","claimInterface","selectAlternateInterface","controlTransferOut","read","num","transferIn","result","error","readHex","data","x","toString","padStart","join","readString","TextDecoder","decode","sendString","str","send","TextEncoder","encode","sendHex","transferOut","bufSendFunction","length","shift","delay","setTimeout","bufSend","push","bufSendHex","receiveFromOtherGB","receiveFromMyGB","sendToMyGB","controleTransferOut","pop","global","jQuery","require","OnlineGBGame","React","Component","props","super","state","master","gbdatain","gbdataout","ws","SocketIO","connect","handleC","serial","connectionMaster","catch","c","handleJ","connectionNotMaster","counter","setState","on","msg","serverOffset","auth","id","emit","text","JSON","parse","name","Math","random","socketID","render","_jsxs","className","children","_jsx","onClick","e","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.96d59f00.chunk.js","sourcesContent":["\nconst fromHexString = hexString =>\n    new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n\n\n\nfunction buf2hex(buffer) { // buffer is an ArrayBuffer\n    return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n  }\n  \nconst toHexString = bytes =>\n    bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n\nclass Serial {\n    constructor() {\n        this.buffer = [];\n\tthis.buffer_in = [];\n        this.buffer_out = [];\n        this.send_active = false;\n\t\n    }\n\n    static getPorts() {\n        return navigator.usb.getDevices().then(devices => {\n            return devices;\n        });\n    }\n\n    static requestPort() {\n        const filters = [\n            { 'vendorId': 0x239A }, // Adafruit boards\n            { 'vendorId': 0xcafe }, // TinyUSB example\n        ];\n        return navigator.usb.requestDevice({ 'filters': filters }).then(\n            device => {\n                return device;\n            }\n        );\n    }\n\n    getEndpoints(interfaces) {\n        interfaces.forEach(element => {\n            var alternates = element.alternates;\n            alternates.forEach(elementalt => {\n                if (elementalt.interfaceClass === 0xFF) {\n                    console.log(\"Interface number:\");\n                    console.log(element.interfaceNumber);\n                    this.ifNum = element.interfaceNumber;\n                    elementalt.endpoints.forEach(elementendpoint => {\n                        if (elementendpoint.direction === \"out\") {\n                            console.log(\"Endpoint out: \");\n                            console.log(elementendpoint.endpointNumber);\n                            this.epOut = elementendpoint.endpointNumber;\n                        }\n\n                        if (elementendpoint.direction === \"in\") {\n                            console.log(\"Endpoint in: \");\n                            console.log(elementendpoint.endpointNumber);\n                            this.epIn = elementendpoint.endpointNumber;\n                        }\n                    });\n                }\n            })\n        })\n    }\n\n    getDevice() {\n        let device = null;\n        this.ready = false;\n        return new Promise((resolve, reject) => {\n            Serial.requestPort().then(dev => {\n                console.log(\"Opening device...\");\n                device = dev;\n                this.device = device;\n                return dev.open();\n            }).then(() => {\n                console.log(\"Selecting configuration\");\n                return device.selectConfiguration(1);\n            }).then(() => {\n                console.log(\"Getting endpoints\")\n                this.getEndpoints(device.configuration.interfaces);\n            }).then(() => {\n                console.log(\"Claiming interface\");\n                return device.claimInterface(this.ifNum);\n            }).then(() => {\n                console.log(\"Select alt interface\");\n                return device.selectAlternateInterface(this.ifNum, 0);\n            }).then(() => {\n                console.log(\"Control Transfer Out\");\n                return device.controlTransferOut({\n                    'requestType': 'class',\n                    'recipient': 'interface',\n                    'request': 0x22,\n                    'value': 0x01,\n                    'index': this.ifNum\n                })\n            }).then(() => {\n                console.log(\"Ready!\");\n                this.ready = true;\n                this.device = device;\n                resolve();\n            })\n        });\n    }\n\n    read(num) {\n        return new Promise((resolve, reject) => {\n            this.device.transferIn(this.epIn, num).then(result => {\n                resolve(result);\n            },\n            error => {\n                console.log(\"Error\");\n                console.log(error);\n                reject(error);\n            });\n        });\n    }\n\n    readHex(num) {\n        return new Promise((resolve, reject) => {\n            this.read(num).then(result => {\n                console.log(\"RES\");\n                console.log(result.data.buffer);\n                resolve(buf2hex(result.data.buffer));\n            },\n            error => {\n                reject(error);\n            })\n        });\n    }\n\n    readString() {\n        this.device.transferIn(this.epIn, 64).then(result => {\n            console.log(\"ReadResult\");\n            console.log(result);\n            let textDecoder = new TextDecoder();\n            return textDecoder.decode(result.data);\n        },\n            error => {\n                console.log(\"ReadError\");\n                console.log(error);\n            })\n    }\n\n    sendString(str) {\n        return this.send(new TextEncoder('utf-8').encode(str));\n    }\n\n    sendHex(str) {\n        return this.send(fromHexString(str));\n    }\n\n    send(data) {\n        return this.device.transferOut(this.epOut, data);\n    }\n\n    bufSendFunction() {\n        this.send_active = true;\n        if(this.buffer.length === 0) {\n            this.send_active = false;\n            return;\n        }\n        var element = this.buffer.shift();\n        var data = element[0];\n        var delay = element[1];\n        this.send(data).then(() => {\n            setTimeout(() => {\n                this.bufSendFunction();\n            }, delay);\n        });\n    }\n\n    bufSend(data, delay) {\n        this.buffer.push([data, delay]);\n        // Sender is not active, create new one\n        if(!this.send_active) {\n            this.bufSendFunction();\n        }\n    }\n\n    bufSendHex(str, delay) {\n        var data = fromHexString(str);\n        this.bufSend(data, delay);\n    }\n\n    receiveFromOtherGB(data) {\n        this.buffer_in.push(data);\n    }\n\n    receiveFromMyGB()\n    {\n            this.device.transferIn(this.epIn, 64).then(result => {\n               this.buffer_out.push(result.data);\n            });\n    }\n\n    sendToMyGB() {\n        if(this.buffer_in.length > 0)\n                this.device.controleTransferOut(this.epOut, this.buffer_in.pop());\n    }\n}\n\nexport { Serial };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport 'bootstrap/dist/js/bootstrap.bundle';\nimport './index.css';\n\nimport SocketIO from 'socket.io-client';\nimport { Serial } from './serial.js';\nglobal.jQuery = require('jquery');\nrequire('bootstrap');\n\nconst HOSTSTATIC = \"127.0.0.1\"; \n\nclass OnlineGBGame extends React.Component {\n  constructor(props)\n  {\n   super(props);\n   console.log(\"Component init...\");\n   console.log(\"Set State to 0\");\n   this.state = 0;\n   this.master = 1;\n   this.gbdatain = \"None\";\n   this.gbdataout = \"None\";\n   console.log(\"Creating GBWebsocket ...\");\n   this.ws = new SocketIO.connect(\"https://\"+HOSTSTATIC+\":8080\");\n  }\n\n  handleC() { // Handle create (master mode)\n    console.log('Click create');\n      console.log(\"Creating serial ...\");\n      this.serial = new Serial();\n      console.log(\"Initializing websocket gymnastic ! (onmessage function)\");\n      console.log(\"Getting device ...\");\n      this.serial.getDevice().then(() => {\n        this.state = 1;\n        console.log(\"Usb connected, updating status.\");\n        this.connectionMaster();\n      }).catch(c => {\n        console.log(\"CATTTCH \"+c);\n      });\n  }\n  \n  handleJ() { // Handle Join (master mode off)\n   console.log('Click create');\n      console.log(\"Creating serial ...\");\n      this.serial = new Serial();\n      console.log(\"Initializing websocket gymnastic ! (onmessage function)\");\n      console.log(\"Getting device ...\");\n      this.serial.getDevice().then(() => {\n        this.state = 1;\n        console.log(\"Usb connected, updating status.\");\n        this.master = 0;\n\tthis.connectionNotMaster();\n      }).catch(c => {\n        console.log(\"CATTTCH \"+c);\n      });\n  }\n\n  connectionNotMaster()\n  {\n   \tlet counter = 0;\n        console.log(\"Wait for receiving first message ...\");\n        this.setState({\n                state: 1\n        });\n        this.ws.on(\"message\", (msg, serverOffset) => {\n                console.log(\"Got message \"+msg+\" from \"+serverOffset);\n                this.gbdatain = msg;\n                this.setState({\n                        gbdatain: msg\n                });\n                console.log(\"Communicating to my GB ...\");\n                this.serial.sendHex(this.gbdatain);\n                this.ws.auth.serverOffset = serverOffset;\n                var clientOffset = this.ws.id+\"-\"+(counter++);\n                this.gbdataout = this.serial.readHex();\n                this.setState({\n                        gbdataout: this.gbdataout\n                });\n                console.log(\"Sending to other GB \"+this.gbdataout+\" from my GB...\");\n                this.ws.emit('message', { text:JSON.parse(this.gbdataout), name: 'GB'+this.ws.id, id: this.ws.id+\"\"+Math.random(), socketID: this.ws.id});\n                console.log(\"Exchange \"+counter+\" : OK.\");\n        });\n  }\n\n  connectionMaster() {\n\tlet counter = 0;\n\tconsole.log(\"Initiatting my first message ...\");\n\tvar clientOffset = this.ws.id+\"-\"+(counter++);\n        this.gbdataout = this.serial.readHex();\n\tthis.setState({\n\t\tgbdataout: this.gbdataout,\n\t\tstate: 1\n\t});\n\tconsole.log(\"Sending to other GB \"+this.gbdataout+\" from my GB...\");\n\tthis.ws.emit('message', { text:JSON.parse(this.gbdataout), name: 'GB'+this.ws.id, id: this.ws.id+\"\"+Math.random(), socketID: this.ws.id});\n        console.log(\"First Exchange : OK.\");\n\tthis.ws.on(\"message\", (msg, serverOffset) => {\n\t\tconsole.log(\"Got message \"+msg+\" from \"+serverOffset);\n\t\tthis.gbdatain = msg;\n\t\tthis.setState({\n\t\t\tgbdatain: msg\n\t\t});\n\t\tconsole.log(\"Communicating to my GB ...\");\n\t\tthis.serial.sendHex(this.gbdatain);\n\t\tthis.ws.auth.serverOffset = serverOffset;\n\t\tvar clientOffset = this.ws.id+\"-\"+(counter++);\n\t\tthis.gbdataout = this.serial.readHex();\n\t\tthis.setState({\n\t\t\tgbdataout: this.gbdataout\n\t\t});\n\t\tconsole.log(\"Sending to other GB \"+this.gbdataout+\" from my GB...\");\n\t\tthis.ws.emit('message', { text:JSON.parse(this.gbdataout), name: 'GB'+this.ws.id, id: this.ws.id+\"\"+Math.random(), socketID: this.ws.id});\n\t\tconsole.log(\"Exchange \"+counter+\" : OK.\");\n\t});\n  }\n  \n  render() {\n\tif(this.state === 0)\n               return (\n          \t<div className=\"connect\">\n            \t\t<button onClick={(e) => this.handleC()} className=\"btn btn-lg btn-secondary\">Host (Master)</button><br/>\n            \t\t<button onClick={(e) => this.handleJ()} className=\"btn btn-lg btn-secondary\">Connect (Client)</button>\n          \t</div>\n               )\n       else if(this.state === 1)\n\t\treturn (\n                <div className=\"connect\">\n\t                <h4>Connected => IN { this.gbdatain.toString() } OUT { this.gbdataout.toString() }</h4>\n                </div>\n               )\n   }\n}\n\n// ========================================\n\nReactDOM.render(\n  <OnlineGBGame />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}