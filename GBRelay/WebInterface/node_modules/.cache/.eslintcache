[{"/home/kali/Project/GameBoyRelay/GBRelay/WebInterface/src/index.js":"1","/home/kali/Project/GameBoyRelay/GBRelay/WebInterface/src/serial.js":"2"},{"size":4850,"mtime":1716366478032,"results":"3","hashOfConfig":"4"},{"size":6061,"mtime":1716257207199,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"hdvlf9",{"filePath":"9","messages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"/home/kali/Project/GameBoyRelay/GBRelay/WebInterface/src/index.js",["12","13","14","15","16"],"import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.js';\nimport 'bootstrap/dist/js/bootstrap.bundle';\nimport './index.css';\n\nimport SocketIO from 'socket.io-client';\nimport { Serial } from './serial.js';\nglobal.jQuery = require('jquery');\nrequire('bootstrap');\n\nconst HOSTSTATIC = \"127.0.0.1\"; \n\nclass OnlineGBGame extends React.Component {\n  constructor(props)\n  {\n   super(props);\n   console.log(\"Component init...\");\n   console.log(\"Set State to 0\");\n   this.state = 0;\n   this.master = 1;\n   this.gbdatain = \"None\";\n   this.gbdataout = \"None\";\n   console.log(\"Creating GBWebsocket ...\");\n   this.ws = new SocketIO.connect(\"https://\"+HOSTSTATIC+\":8080\");\n  }\n\n  handleC() { // Handle create (master mode)\n    console.log('Click create');\n      console.log(\"Creating serial ...\");\n      this.serial = new Serial();\n      console.log(\"Initializing websocket gymnastic ! (onmessage function)\");\n      console.log(\"Getting device ...\");\n      this.serial.getDevice().then(() => {\n        this.state = 1;\n        console.log(\"Usb connected, updating status.\");\n        this.connectionMaster();\n      }).catch(c => {\n        console.log(\"CATTTCH \"+c);\n      });\n  }\n  \n  handleJ() { // Handle Join (master mode off)\n   console.log('Click create');\n      console.log(\"Creating serial ...\");\n      this.serial = new Serial();\n      console.log(\"Initializing websocket gymnastic ! (onmessage function)\");\n      console.log(\"Getting device ...\");\n      this.serial.getDevice().then(() => {\n        this.state = 1;\n        console.log(\"Usb connected, updating status.\");\n        this.master = 0;\n\tthis.connectionNotMaster();\n      }).catch(c => {\n        console.log(\"CATTTCH \"+c);\n      });\n  }\n\n  connectionNotMaster()\n  {\n   \tlet counter = 0;\n        console.log(\"Wait for receiving first message ...\");\n        this.setState({\n                state: 1\n        });\n        this.ws.on(\"message\", (msg, serverOffset) => {\n                console.log(\"Got message \"+msg+\" from \"+serverOffset);\n                this.gbdatain = msg;\n                this.setState({\n                        gbdatain: msg\n                });\n                console.log(\"Communicating to my GB ...\");\n                this.serial.sendHex(this.gbdatain);\n                this.ws.auth.serverOffset = serverOffset;\n                var clientOffset = this.ws.id+\"-\"+(counter++);\n                this.gbdataout = this.serial.readHex();\n                this.setState({\n                        gbdataout: this.gbdataout\n                });\n                console.log(\"Sending to other GB \"+this.gbdataout+\" from my GB...\");\n                this.ws.emit('message', { text:JSON.parse(this.gbdataout), name: 'GB'+this.ws.id, id: this.ws.id+\"\"+Math.random(), socketID: this.ws.id});\n                console.log(\"Exchange \"+counter+\" : OK.\");\n        });\n  }\n\n  connectionMaster() {\n\tlet counter = 0;\n\tconsole.log(\"Initiatting my first message ...\");\n\tvar clientOffset = this.ws.id+\"-\"+(counter++);\n        this.gbdataout = this.serial.readHex();\n\tthis.setState({\n\t\tgbdataout: this.gbdataout,\n\t\tstate: 1\n\t});\n\tconsole.log(\"Sending to other GB \"+this.gbdataout+\" from my GB...\");\n\tthis.ws.emit('message', { text:JSON.parse(this.gbdataout), name: 'GB'+this.ws.id, id: this.ws.id+\"\"+Math.random(), socketID: this.ws.id});\n        console.log(\"First Exchange : OK.\");\n\tthis.ws.on(\"message\", (msg, serverOffset) => {\n\t\tconsole.log(\"Got message \"+msg+\" from \"+serverOffset);\n\t\tthis.gbdatain = msg;\n\t\tthis.setState({\n\t\t\tgbdatain: msg\n\t\t});\n\t\tconsole.log(\"Communicating to my GB ...\");\n\t\tthis.serial.sendHex(this.gbdatain);\n\t\tthis.ws.auth.serverOffset = serverOffset;\n\t\tvar clientOffset = this.ws.id+\"-\"+(counter++);\n\t\tthis.gbdataout = this.serial.readHex();\n\t\tthis.setState({\n\t\t\tgbdataout: this.gbdataout\n\t\t});\n\t\tconsole.log(\"Sending to other GB \"+this.gbdataout+\" from my GB...\");\n\t\tthis.ws.emit('message', { text:JSON.parse(this.gbdataout), name: 'GB'+this.ws.id, id: this.ws.id+\"\"+Math.random(), socketID: this.ws.id});\n\t\tconsole.log(\"Exchange \"+counter+\" : OK.\");\n\t});\n  }\n  \n  render() {\n\tif(this.state === 0)\n               return (\n          \t<div className=\"connect\">\n            \t\t<button onClick={(e) => this.handleC()} className=\"btn btn-lg btn-secondary\">Host (Master)</button><br/>\n            \t\t<button onClick={(e) => this.handleJ()} className=\"btn btn-lg btn-secondary\">Connect (Client)</button>\n          \t</div>\n               )\n       else if(this.state === 1)\n\t\treturn (\n                <div className=\"connect\">\n\t                <h4>Connected => IN { this.gbdatain.toString() } OUT { this.gbdataout.toString() }</h4>\n                </div>\n               )\n   }\n}\n\n// ========================================\n\nReactDOM.render(\n  <OnlineGBGame />,\n  document.getElementById('root')\n);\n","/home/kali/Project/GameBoyRelay/GBRelay/WebInterface/src/serial.js",["17"],"\nconst fromHexString = hexString =>\n    new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n\n\n\nfunction buf2hex(buffer) { // buffer is an ArrayBuffer\n    return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n  }\n  \nconst toHexString = bytes =>\n    bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n\nclass Serial {\n    constructor() {\n        this.buffer = [];\n\tthis.buffer_in = [];\n        this.buffer_out = [];\n        this.send_active = false;\n\t\n    }\n\n    static getPorts() {\n        return navigator.usb.getDevices().then(devices => {\n            return devices;\n        });\n    }\n\n    static requestPort() {\n        const filters = [\n            { 'vendorId': 0x239A }, // Adafruit boards\n            { 'vendorId': 0xcafe }, // TinyUSB example\n        ];\n        return navigator.usb.requestDevice({ 'filters': filters }).then(\n            device => {\n                return device;\n            }\n        );\n    }\n\n    getEndpoints(interfaces) {\n        interfaces.forEach(element => {\n            var alternates = element.alternates;\n            alternates.forEach(elementalt => {\n                if (elementalt.interfaceClass === 0xFF) {\n                    console.log(\"Interface number:\");\n                    console.log(element.interfaceNumber);\n                    this.ifNum = element.interfaceNumber;\n                    elementalt.endpoints.forEach(elementendpoint => {\n                        if (elementendpoint.direction === \"out\") {\n                            console.log(\"Endpoint out: \");\n                            console.log(elementendpoint.endpointNumber);\n                            this.epOut = elementendpoint.endpointNumber;\n                        }\n\n                        if (elementendpoint.direction === \"in\") {\n                            console.log(\"Endpoint in: \");\n                            console.log(elementendpoint.endpointNumber);\n                            this.epIn = elementendpoint.endpointNumber;\n                        }\n                    });\n                }\n            })\n        })\n    }\n\n    getDevice() {\n        let device = null;\n        this.ready = false;\n        return new Promise((resolve, reject) => {\n            Serial.requestPort().then(dev => {\n                console.log(\"Opening device...\");\n                device = dev;\n                this.device = device;\n                return dev.open();\n            }).then(() => {\n                console.log(\"Selecting configuration\");\n                return device.selectConfiguration(1);\n            }).then(() => {\n                console.log(\"Getting endpoints\")\n                this.getEndpoints(device.configuration.interfaces);\n            }).then(() => {\n                console.log(\"Claiming interface\");\n                return device.claimInterface(this.ifNum);\n            }).then(() => {\n                console.log(\"Select alt interface\");\n                return device.selectAlternateInterface(this.ifNum, 0);\n            }).then(() => {\n                console.log(\"Control Transfer Out\");\n                return device.controlTransferOut({\n                    'requestType': 'class',\n                    'recipient': 'interface',\n                    'request': 0x22,\n                    'value': 0x01,\n                    'index': this.ifNum\n                })\n            }).then(() => {\n                console.log(\"Ready!\");\n                this.ready = true;\n                this.device = device;\n                resolve();\n            })\n        });\n    }\n\n    read(num) {\n        return new Promise((resolve, reject) => {\n            this.device.transferIn(this.epIn, num).then(result => {\n                resolve(result);\n            },\n            error => {\n                console.log(\"Error\");\n                console.log(error);\n                reject(error);\n            });\n        });\n    }\n\n    readHex(num) {\n        return new Promise((resolve, reject) => {\n            this.read(num).then(result => {\n                console.log(\"RES\");\n                console.log(result.data.buffer);\n                resolve(buf2hex(result.data.buffer));\n            },\n            error => {\n                reject(error);\n            })\n        });\n    }\n\n    readString() {\n        this.device.transferIn(this.epIn, 64).then(result => {\n            console.log(\"ReadResult\");\n            console.log(result);\n            let textDecoder = new TextDecoder();\n            return textDecoder.decode(result.data);\n        },\n            error => {\n                console.log(\"ReadError\");\n                console.log(error);\n            })\n    }\n\n    sendString(str) {\n        return this.send(new TextEncoder('utf-8').encode(str));\n    }\n\n    sendHex(str) {\n        return this.send(fromHexString(str));\n    }\n\n    send(data) {\n        return this.device.transferOut(this.epOut, data);\n    }\n\n    bufSendFunction() {\n        this.send_active = true;\n        if(this.buffer.length === 0) {\n            this.send_active = false;\n            return;\n        }\n        var element = this.buffer.shift();\n        var data = element[0];\n        var delay = element[1];\n        this.send(data).then(() => {\n            setTimeout(() => {\n                this.bufSendFunction();\n            }, delay);\n        });\n    }\n\n    bufSend(data, delay) {\n        this.buffer.push([data, delay]);\n        // Sender is not active, create new one\n        if(!this.send_active) {\n            this.bufSendFunction();\n        }\n    }\n\n    bufSendHex(str, delay) {\n        var data = fromHexString(str);\n        this.bufSend(data, delay);\n    }\n\n    receiveFromOtherGB(data) {\n        this.buffer_in.push(data);\n    }\n\n    receiveFromMyGB()\n    {\n            this.device.transferIn(this.epIn, 64).then(result => {\n               this.buffer_out.push(result.data);\n            });\n    }\n\n    sendToMyGB() {\n        if(this.buffer_in.length > 0)\n                this.device.controleTransferOut(this.epOut, this.buffer_in.pop());\n    }\n}\n\nexport { Serial };\n",{"ruleId":"18","severity":1,"message":"19","line":37,"column":9,"nodeType":"20","messageId":"21","endLine":37,"endColumn":13},{"ruleId":"18","severity":1,"message":"19","line":52,"column":9,"nodeType":"20","messageId":"21","endLine":52,"endColumn":13},{"ruleId":"22","severity":1,"message":"23","line":77,"column":21,"nodeType":"24","messageId":"25","endLine":77,"endColumn":33},{"ruleId":"22","severity":1,"message":"23","line":91,"column":6,"nodeType":"24","messageId":"25","endLine":91,"endColumn":18},{"ruleId":"22","severity":1,"message":"23","line":109,"column":7,"nodeType":"24","messageId":"25","endLine":109,"endColumn":19},{"ruleId":"22","severity":1,"message":"26","line":11,"column":7,"nodeType":"24","messageId":"25","endLine":11,"endColumn":18},"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","ThisExpression","noDirectMutation","no-unused-vars","'clientOffset' is assigned a value but never used.","Identifier","unusedVar","'toHexString' is assigned a value but never used."]