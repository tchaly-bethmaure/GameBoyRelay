{"ast":null,"code":"const fromHexString = hexString => new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\nfunction buf2hex(buffer) {\n  // buffer is an ArrayBuffer\n  return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n}\nconst toHexString = bytes => bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\nclass Serial {\n  constructor() {\n    this.buffer = [];\n    this.buffer_in = [];\n    this.buffer_out = [];\n    this.send_active = false;\n  }\n  static getPorts() {\n    return navigator.usb.getDevices().then(devices => {\n      return devices;\n    });\n  }\n  static requestPort() {\n    const filters = [{\n      'vendorId': 0x239A\n    },\n    // Adafruit boards\n    {\n      'vendorId': 0xcafe\n    } // TinyUSB example\n    ];\n    return navigator.usb.requestDevice({\n      'filters': filters\n    }).then(device => {\n      return device;\n    });\n  }\n  getEndpoints(interfaces) {\n    interfaces.forEach(element => {\n      var alternates = element.alternates;\n      alternates.forEach(elementalt => {\n        if (elementalt.interfaceClass === 0xFF) {\n          console.log(\"Interface number:\");\n          console.log(element.interfaceNumber);\n          this.ifNum = element.interfaceNumber;\n          elementalt.endpoints.forEach(elementendpoint => {\n            if (elementendpoint.direction === \"out\") {\n              console.log(\"Endpoint out: \");\n              console.log(elementendpoint.endpointNumber);\n              this.epOut = elementendpoint.endpointNumber;\n            }\n            if (elementendpoint.direction === \"in\") {\n              console.log(\"Endpoint in: \");\n              console.log(elementendpoint.endpointNumber);\n              this.epIn = elementendpoint.endpointNumber;\n            }\n          });\n        }\n      });\n    });\n  }\n  getDevice() {\n    let device = null;\n    this.ready = false;\n    return new Promise((resolve, reject) => {\n      Serial.requestPort().then(dev => {\n        console.log(\"Opening device...\");\n        device = dev;\n        this.device = device;\n        return dev.open();\n      }).then(() => {\n        console.log(\"Selecting configuration\");\n        return device.selectConfiguration(1);\n      }).then(() => {\n        console.log(\"Getting endpoints\");\n        this.getEndpoints(device.configuration.interfaces);\n      }).then(() => {\n        console.log(\"Claiming interface\");\n        return device.claimInterface(this.ifNum);\n      }).then(() => {\n        console.log(\"Select alt interface\");\n        return device.selectAlternateInterface(this.ifNum, 0);\n      }).then(() => {\n        console.log(\"Control Transfer Out\");\n        return device.controlTransferOut({\n          'requestType': 'class',\n          'recipient': 'interface',\n          'request': 0x22,\n          'value': 0x01,\n          'index': this.ifNum\n        });\n      }).then(() => {\n        console.log(\"Ready!\");\n        this.ready = true;\n        this.device = device;\n        resolve();\n      });\n    });\n  }\n  read(num) {\n    return new Promise((resolve, reject) => {\n      this.device.transferIn(this.epIn, num).then(result => {\n        resolve(result);\n      }, error => {\n        console.log(\"Error\");\n        console.log(error);\n        reject(error);\n      });\n    });\n  }\n  readHex(num) {\n    return new Promise((resolve, reject) => {\n      this.read(num).then(result => {\n        console.log(\"RES\");\n        console.log(result.data.buffer);\n        resolve(buf2hex(result.data.buffer));\n      }, error => {\n        reject(error);\n      });\n    });\n  }\n  readString() {\n    this.device.transferIn(this.epIn, 64).then(result => {\n      console.log(\"ReadResult\");\n      console.log(result);\n      let textDecoder = new TextDecoder();\n      return textDecoder.decode(result.data);\n    }, error => {\n      console.log(\"ReadError\");\n      console.log(error);\n    });\n  }\n  sendString(str) {\n    return this.send(new TextEncoder('utf-8').encode(str));\n  }\n  sendHex(str) {\n    return this.send(fromHexString(str));\n  }\n  send(data) {\n    return this.device.transferOut(this.epOut, data);\n  }\n  bufSendFunction() {\n    this.send_active = true;\n    if (this.buffer.length === 0) {\n      this.send_active = false;\n      return;\n    }\n    var element = this.buffer.shift();\n    var data = element[0];\n    var delay = element[1];\n    this.send(data).then(() => {\n      setTimeout(() => {\n        this.bufSendFunction();\n      }, delay);\n    });\n  }\n  bufSend(data, delay) {\n    this.buffer.push([data, delay]);\n    // Sender is not active, create new one\n    if (!this.send_active) {\n      this.bufSendFunction();\n    }\n  }\n  bufSendHex(str, delay) {\n    var data = fromHexString(str);\n    this.bufSend(data, delay);\n  }\n  receiveFromOtherGB(data) {\n    this.buffer_in.push(data);\n  }\n  receiveFromMyGB() {\n    this.device.transferIn(this.epIn, 64).then(result => {\n      this.buffer_out.push(result.data);\n    });\n  }\n  sendToMyGB() {\n    if (this.buffer_in.length > 0) this.device.controleTransferOut(this.epOut, this.buffer_in.pop());\n  }\n}\nexport { Serial };","map":{"version":3,"names":["fromHexString","hexString","Uint8Array","match","map","byte","parseInt","buf2hex","buffer","x","toString","padStart","join","toHexString","bytes","reduce","str","Serial","constructor","buffer_in","buffer_out","send_active","getPorts","navigator","usb","getDevices","then","devices","requestPort","filters","requestDevice","device","getEndpoints","interfaces","forEach","element","alternates","elementalt","interfaceClass","console","log","interfaceNumber","ifNum","endpoints","elementendpoint","direction","endpointNumber","epOut","epIn","getDevice","ready","Promise","resolve","reject","dev","open","selectConfiguration","configuration","claimInterface","selectAlternateInterface","controlTransferOut","read","num","transferIn","result","error","readHex","data","readString","textDecoder","TextDecoder","decode","sendString","send","TextEncoder","encode","sendHex","transferOut","bufSendFunction","length","shift","delay","setTimeout","bufSend","push","bufSendHex","receiveFromOtherGB","receiveFromMyGB","sendToMyGB","controleTransferOut","pop"],"sources":["/home/kali/Project/GameBoyRelay/GBRelay/WebInterface/src/serial.js"],"sourcesContent":["\nconst fromHexString = hexString =>\n    new Uint8Array(hexString.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n\n\n\nfunction buf2hex(buffer) { // buffer is an ArrayBuffer\n    return [...new Uint8Array(buffer)].map(x => x.toString(16).padStart(2, '0')).join('');\n  }\n  \nconst toHexString = bytes =>\n    bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '');\n\nclass Serial {\n    constructor() {\n        this.buffer = [];\n\tthis.buffer_in = [];\n        this.buffer_out = [];\n        this.send_active = false;\n\t\n    }\n\n    static getPorts() {\n        return navigator.usb.getDevices().then(devices => {\n            return devices;\n        });\n    }\n\n    static requestPort() {\n        const filters = [\n            { 'vendorId': 0x239A }, // Adafruit boards\n            { 'vendorId': 0xcafe }, // TinyUSB example\n        ];\n        return navigator.usb.requestDevice({ 'filters': filters }).then(\n            device => {\n                return device;\n            }\n        );\n    }\n\n    getEndpoints(interfaces) {\n        interfaces.forEach(element => {\n            var alternates = element.alternates;\n            alternates.forEach(elementalt => {\n                if (elementalt.interfaceClass === 0xFF) {\n                    console.log(\"Interface number:\");\n                    console.log(element.interfaceNumber);\n                    this.ifNum = element.interfaceNumber;\n                    elementalt.endpoints.forEach(elementendpoint => {\n                        if (elementendpoint.direction === \"out\") {\n                            console.log(\"Endpoint out: \");\n                            console.log(elementendpoint.endpointNumber);\n                            this.epOut = elementendpoint.endpointNumber;\n                        }\n\n                        if (elementendpoint.direction === \"in\") {\n                            console.log(\"Endpoint in: \");\n                            console.log(elementendpoint.endpointNumber);\n                            this.epIn = elementendpoint.endpointNumber;\n                        }\n                    });\n                }\n            })\n        })\n    }\n\n    getDevice() {\n        let device = null;\n        this.ready = false;\n        return new Promise((resolve, reject) => {\n            Serial.requestPort().then(dev => {\n                console.log(\"Opening device...\");\n                device = dev;\n                this.device = device;\n                return dev.open();\n            }).then(() => {\n                console.log(\"Selecting configuration\");\n                return device.selectConfiguration(1);\n            }).then(() => {\n                console.log(\"Getting endpoints\")\n                this.getEndpoints(device.configuration.interfaces);\n            }).then(() => {\n                console.log(\"Claiming interface\");\n                return device.claimInterface(this.ifNum);\n            }).then(() => {\n                console.log(\"Select alt interface\");\n                return device.selectAlternateInterface(this.ifNum, 0);\n            }).then(() => {\n                console.log(\"Control Transfer Out\");\n                return device.controlTransferOut({\n                    'requestType': 'class',\n                    'recipient': 'interface',\n                    'request': 0x22,\n                    'value': 0x01,\n                    'index': this.ifNum\n                })\n            }).then(() => {\n                console.log(\"Ready!\");\n                this.ready = true;\n                this.device = device;\n                resolve();\n            })\n        });\n    }\n\n    read(num) {\n        return new Promise((resolve, reject) => {\n            this.device.transferIn(this.epIn, num).then(result => {\n                resolve(result);\n            },\n            error => {\n                console.log(\"Error\");\n                console.log(error);\n                reject(error);\n            });\n        });\n    }\n\n    readHex(num) {\n        return new Promise((resolve, reject) => {\n            this.read(num).then(result => {\n                console.log(\"RES\");\n                console.log(result.data.buffer);\n                resolve(buf2hex(result.data.buffer));\n            },\n            error => {\n                reject(error);\n            })\n        });\n    }\n\n    readString() {\n        this.device.transferIn(this.epIn, 64).then(result => {\n            console.log(\"ReadResult\");\n            console.log(result);\n            let textDecoder = new TextDecoder();\n            return textDecoder.decode(result.data);\n        },\n            error => {\n                console.log(\"ReadError\");\n                console.log(error);\n            })\n    }\n\n    sendString(str) {\n        return this.send(new TextEncoder('utf-8').encode(str));\n    }\n\n    sendHex(str) {\n        return this.send(fromHexString(str));\n    }\n\n    send(data) {\n        return this.device.transferOut(this.epOut, data);\n    }\n\n    bufSendFunction() {\n        this.send_active = true;\n        if(this.buffer.length === 0) {\n            this.send_active = false;\n            return;\n        }\n        var element = this.buffer.shift();\n        var data = element[0];\n        var delay = element[1];\n        this.send(data).then(() => {\n            setTimeout(() => {\n                this.bufSendFunction();\n            }, delay);\n        });\n    }\n\n    bufSend(data, delay) {\n        this.buffer.push([data, delay]);\n        // Sender is not active, create new one\n        if(!this.send_active) {\n            this.bufSendFunction();\n        }\n    }\n\n    bufSendHex(str, delay) {\n        var data = fromHexString(str);\n        this.bufSend(data, delay);\n    }\n\n    receiveFromOtherGB(data) {\n        this.buffer_in.push(data);\n    }\n\n    receiveFromMyGB()\n    {\n            this.device.transferIn(this.epIn, 64).then(result => {\n               this.buffer_out.push(result.data);\n            });\n    }\n\n    sendToMyGB() {\n        if(this.buffer_in.length > 0)\n                this.device.controleTransferOut(this.epOut, this.buffer_in.pop());\n    }\n}\n\nexport { Serial };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}